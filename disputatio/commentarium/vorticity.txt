(12:13:45 PM) Paul T. Bauman: no worries. My brain hasn't functioned probably in ~10 years
(12:14:44 PM) Paul T. Bauman: So looking at inc_navier_stokes.C
(12:15:03 PM) Paul T. Bauman: line 83 is the register_postprocessing_vars function
(12:15:45 PM) Paul T. Bauman: There you would check the input file for the name of the output quantity and register it. What's currently there is for the viscosity, 'mu'. You'd do exactly the analogous thing.
(12:15:50 PM) nick: ok
(12:16:09 PM) Paul T. Bauman: Then, line 575
(12:16:18 PM) Paul T. Bauman: compute_postprocessed_quantity
(12:16:40 PM) Paul T. Bauman: You check if the incoming index corresponds to the one you grabbed for your new quantity
(12:16:43 PM) Paul T. Bauman: and if so, compute it
(12:16:50 PM) nick: ok, awesome
(12:16:53 PM) nick: got it
(12:17:01 PM) Paul T. Bauman: You're given the libMesh::Point p
(12:17:05 PM) Paul T. Bauman: err point
(12:17:07 PM) nick: right
(12:17:26 PM) Paul T. Bauman: So you can use the FEMContext to compute things that you might need at the libMesh::Point
(12:17:39 PM) Paul T. Bauman: E.g. you need velocity gradient for vorticity
(12:18:08 PM) Paul T. Bauman: http://libmesh.github.io/doxygen/classlibMesh_1_1FEMContext.html#ab19dc3241a17d7048a88ba11e3edec21
(12:18:21 PM) Paul T. Bauman: You'd give it the variable for each of the velocity components
(12:18:23 PM) Paul T. Bauman: Etc.
(12:19:02 PM) nick: ok awesome
(12:19:22 PM) nick: so you get a pointwise gradient
(12:19:25 PM) Paul T. Bauman: elastic_membrane.C has more involved calculations if you want another example
(12:19:34 PM) Paul T. Bauman: Right, you're computing the quantity at each point
